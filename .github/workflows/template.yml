name: Template Deploy

on:
  workflow_call:
  inputs:
    nome:
      required: true
      type: string

#=======================
# Test Automatizados
#=======================
jobs:
  test:     
    name: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Teste
      run: echo ${{ inputs.nome }}

    # - name: Set Variables Dinamic
    #   id: setvars
    #   shell: bash
    #   env:
    #     DEV_AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
    #     DEV_AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
    #     DEV_AWS_ARN_K8S_ADMIN: ${{ secrets.DEV_AWS_ARN_K8S_ADMIN }}
    #     PRD_AWS_ACCESS_KEY_ID: ${{ secrets.PRD_AWS_ACCESS_KEY_ID }}
    #     PRD_AWS_SECRET_ACCESS_KEY: ${{ secrets.PRD_AWS_SECRET_ACCESS_KEY }}
    #     PRD_AWS_ARN_K8S_ADMIN: ${{ secrets.PRD_AWS_ARN_K8S_ADMIN }}
    #   run: |     
    #     bash devops/github-scripts/setvars.sh

    # - name: Lint
    #   run: exit 0;

    # - name: Robocop
    #   run: exit 0; 

    # - name: Rspec
    #   run: exit 0;

    # - name: Selenium
    #   run: exit 0;      

# #=======================
# # Build Docker
# #=======================
#   build:     
#     name: build 
#     needs: test
#     runs-on: ubuntu-latest
    
#     steps:
#     - name: Checkout Code
#       uses: actions/checkout@v2

#     - name: Set Variables Dinamic
#       id: setvars
#       shell: bash
#       env:
#         DEV_AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
#         DEV_AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
#         DEV_AWS_ARN_K8S_ADMIN: ${{ secrets.DEV_AWS_ARN_K8S_ADMIN }}
#         PRD_AWS_ACCESS_KEY_ID: ${{ secrets.PRD_AWS_ACCESS_KEY_ID }}
#         PRD_AWS_SECRET_ACCESS_KEY: ${{ secrets.PRD_AWS_SECRET_ACCESS_KEY }}
#         PRD_AWS_ARN_K8S_ADMIN: ${{ secrets.PRD_AWS_ARN_K8S_ADMIN }}
#       run: |     
#         bash devops/github-scripts/setvars.sh

#     - name: Checkout code
#       uses: actions/checkout@v2

#     - name: Configure AWS Credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ steps.setvars.outputs.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ steps.setvars.outputs.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ steps.setvars.outputs.AWS_REGION }}

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1

#     - name: Build Docker
#       shell: bash 
#       env:
#         TAG: ${{ steps.setvars.outputs.TAG }}
#       run: |
#         bash devops/docker/build.sh 

# #=======================
# # Deploy
# #=======================
#   deploy:
#     name: kubernetes
#     needs: build
#     runs-on: ubuntu-latest
    
#     steps:
#     - name: Checkout Code
#       uses: actions/checkout@v2

#     - name: Set Variables Dinamic
#       id: setvars
#       shell: bash
#       env:
#         DEV_AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
#         DEV_AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
#         DEV_AWS_ARN_K8S_ADMIN: ${{ secrets.DEV_AWS_ARN_K8S_ADMIN }}
#         PRD_AWS_ACCESS_KEY_ID: ${{ secrets.PRD_AWS_ACCESS_KEY_ID }}
#         PRD_AWS_SECRET_ACCESS_KEY: ${{ secrets.PRD_AWS_SECRET_ACCESS_KEY }}
#         PRD_AWS_ARN_K8S_ADMIN: ${{ secrets.PRD_AWS_ARN_K8S_ADMIN }}              
#       run: |     
#         bash devops/github-scripts/setvars.sh

#     - name: Configure AWS Credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ steps.setvars.outputs.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ steps.setvars.outputs.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ steps.setvars.outputs.AWS_REGION }}

#     - name: Get AWS Credentials ECR
#       id: aws-ecr-login-password
#       run: echo "::set-output name=crendential::$(aws ecr get-login-password)"

#     - name: Destroy Token Registry
#       uses: ianbelcher/eks-kubectl-action@master 
#       with:
#         aws_access_key_id: ${{ steps.setvars.outputs.AWS_ACCESS_KEY_ID }}
#         aws_secret_access_key: ${{ steps.setvars.outputs.AWS_SECRET_ACCESS_KEY }}
#         aws_region: ${{ steps.setvars.outputs.AWS_REGION }}
#         cluster_name: ${{ steps.setvars.outputs.CLUSTERNAME }}
#         eks_role_arn: ${{ steps.setvars.outputs.AWS_ARN_K8S_ADMIN }}
#         args: delete secret --ignore-not-found registryuser -n ${{ steps.setvars.outputs.RAILS_ENV }} 
     
#     - name: Create Token Registry
#       uses: ianbelcher/eks-kubectl-action@master
#       with:
#         aws_access_key_id: ${{ steps.setvars.outputs.AWS_ACCESS_KEY_ID }}
#         aws_secret_access_key: ${{ steps.setvars.outputs.AWS_SECRET_ACCESS_KEY }}
#         aws_region: ${{ steps.setvars.outputs.AWS_REGION }}
#         cluster_name: ${{ steps.setvars.outputs.CLUSTERNAME }}
#         eks_role_arn: ${{ steps.setvars.outputs.AWS_ARN_K8S_ADMIN }}
#         args: create secret docker-registry registryuser --docker-server=${{ secrets.AWS_ECR_REGISTRY }} --docker-username=registryuser --docker-password=${{ steps.aws-ecr-login-password.outputs.crendential }} -n ${{ steps.setvars.outputs.RAILS_ENV }}

#     - name: Replace EnvSubst
#       shell: bash
#       run: |
#         export RAILS_ENV=${{ steps.setvars.outputs.RAILS_ENV }}
#         export TAG=${{ steps.setvars.outputs.TAG }}
#         export CONTAINER_IMAGE_NGINX=${{ secrets.AWS_ECR_REGISTRY }}/${ECR_REPOSITORY_PROJECT}:nginx_${TAG:-${GITHUB_SHA}}
#         export CONTAINER_IMAGE_RAILS=${{ secrets.AWS_ECR_REGISTRY }}/${ECR_REPOSITORY_PROJECT}:rails_${TAG:-${GITHUB_SHA}}
#         export MIN_REPLICAS=1
#         export MAX_REPLICAS=2
#         export DEPLOYMENT_REQUEST_RAM=250Mi
#         export DEPLOYMENT_REQUEST_CPU=500m
#         export DEPLOYMENT_LIMIT_RAM=600Mi
#         export DEPLOYMENT_LIMIT_CPU=1000m
#         export VHOST_1=cicd
#         export VHOST_2=sistema


#         if [[ ${RAILS_ENV} == "production" ]]
#         then
#             export VHOST_1_INTERNAL=${VHOST_1}.nexoos.internal
#             export VHOST_1_EXTERNAL=${VHOST_1}.nexoos.com.br
#             export VHOST_2_INTERNAL=${VHOST_2}.nexoos.internal
#             export VHOST_2_EXTERNAL=${VHOST_2}.nexoos.com.br

#         else
#             [[ ${RAILS_ENV} == "development" ]] && export SUFIX_URL="dev"
#             [[ ${RAILS_ENV} == "homologacao" ]] && export SUFIX_URL="hom"
#             [[ ${RAILS_ENV} == "treinamento" ]] && export SUFIX_URL="tre"
#             [[ ${RAILS_ENV} == "staging" ]]     && export SUFIX_URL="stg"
#             [[ ${RAILS_ENV} == "learning" ]]    && export SUFIX_URL="learn"

#             export VHOST_1_INTERNAL=${VHOST_1}-${SUFIX_URL}.nexoos.internal
#             export VHOST_1_EXTERNAL=${VHOST_1}.${SUFIX_URL}.nexoos.com.br
#             export VHOST_2_INTERNAL=${VHOST_2}-${SUFIX_URL}.nexoos.internal
#             export VHOST_2_EXTERNAL=${VHOST_2}.${SUFIX_URL}.nexoos.com.br
 
#         fi

#         bash devops/k8s/replace.sh 

#     - name: Deploy AWS EKS
#       uses: ianbelcher/eks-kubectl-action@master
#       with:
#         aws_access_key_id: ${{ steps.setvars.outputs.AWS_ACCESS_KEY_ID }}
#         aws_secret_access_key: ${{ steps.setvars.outputs.AWS_SECRET_ACCESS_KEY }}
#         aws_region: ${{ steps.setvars.outputs.AWS_REGION }}
#         cluster_name: ${{ steps.setvars.outputs.CLUSTERNAME }}
#         eks_role_arn: ${{ steps.setvars.outputs.AWS_ARN_K8S_ADMIN }}
#         args: apply -f devops/k8s/build

#     - name: List Pods
#       uses: ianbelcher/eks-kubectl-action@master
#       with:
#         aws_access_key_id: ${{ steps.setvars.outputs.AWS_ACCESS_KEY_ID }}
#         aws_secret_access_key: ${{ steps.setvars.outputs.AWS_SECRET_ACCESS_KEY }}
#         aws_region: ${{ steps.setvars.outputs.AWS_REGION }}
#         cluster_name: ${{ steps.setvars.outputs.CLUSTERNAME }}
#         eks_role_arn: ${{ steps.setvars.outputs.AWS_ARN_K8S_ADMIN }}
#         args: get pods -n ${{ steps.setvars.outputs.RAILS_ENV }}